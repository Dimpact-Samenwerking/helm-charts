tags:
  contact: true
  zaak: true

global:
  configuration:
    enabled: true
    overwrite: true
    organization: Example gemeente
    openzaakAutorisatiesApi: http//openzaak.podiumd.svc.cluster.local/autorisaties/api/v1/
    notificatiesApi: http://opennotificaties.podiumd.svc.cluster.local/api/v1/
    notificatiesOpenzaakClientId: notificaties
    notificatiesOpenzaakSecret: notificaties-secret
    openzaakNotificatiesClientId: openzaak
    openzaakNotificatiesSecret: openzaak-secret

  settings:
    databaseHost: ""

  imageRegistry: ""

persistentVolume:
  volumeAttributeShareName: ""
  volumeAttributeResourceGroup: ""
  nodeStageSecretRefName: ""
  nodeStageSecretRefNamespace: ""

keycloak:
  auth:
    adminUser: admin
    adminPassword: "changemenow"
  # -- cache setting for keycloak, if there are multiple instances they will automatically form a cluster for the cache
  cache:
    enabled: true
    stackName: kubernetes
  config:
    adminFrontendUrl: https://keycloak-admin.example.nl
    # Example configuration
    #     - alias: "oidc-admin-users"
    #      displayName: "podiumd admin users"
    #      providerId: "oidc"
    #      enabled: true
    #      updateProfileFirstLoginMode: "on"
    #      config:
    #        tokenUrl: "https://login.microsoftonline.com/organizations/oauth2/v2.0/token"
    #        jwksUrl: "https://login.microsoftonline.com/organizations/discovery/v2.0/keys"
    #        issuer: "https://login.microsoftonline.com/{ tenantId }/v2.0"
    #        clientSecret: "{ clientSecret }"
    #        clientId: "{ clientId }"
    #        syncMode: "FORCE"
    #        userInfoUrl: "https://graph.microsoft.com/oidc/userinfo"
    #        metadataDescriptorUrl: "https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration"
    #        authorizationUrl: "https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize"
    #        logoutUrl: "https://login.microsoftonline.com/organizations/oauth2/v2.0/logout"
    # -- identity providers for the admin realm (usually master)
    adminIdentityProviders: {}
    # Example configuration
    #    - name: "admin-group-mapper"
    #      identityProviderAlias: "oidc-admin-users"
    #      identityProviderMapper: "oidc-hardcoded-role-idp-mapper"
    #      config:
    #        syncMode: "FORCE"
    #        role: "admin"
    # -- identity provider mapper for the admin realm
    adminIdentityProviderMappers: {}
    adminOtpEnabled: false
    realm: podiumd
    realmDisplayName: PodiumD
    realmFrontendUrl: https://keycloak.example.nl
    realmIdentityProviders: {}
    realmIdentityProviderMappers: {}
    smtp:
      server: mail.example.nl
      port: "587"
      from: "Test"
      fromDisplayName: "noreply@example.nl"
      starttls: "true"
      ssl: "false"
  # -- required to activate infinispan
  # customCaExistingSecret: ispn-secret
  # -- enable keycloak by default
  enabled: true
  # -- required to activate infinispan
  #extraEnvVars: |
  #  - name: KC_TRUSTSTORE_PATHS
  #    value: "/opt/bitnami/keycloak/custom-ca"
  # -- required to activate infinispan
  #extraStartupArgs: "--cache-remote-host=ispn --cache-remote-port=11222 --cache-remote-username=keycloak --cache-remote-password=changemenow --log-level=INFO --spi-connections-infinispan-quarkus-site-name=ontw-dimp"
  # image parameters for keycloak
  image:
    registry: ""
    repository: keycloak
    tag: 25.0.6
  externalDatabase:
    host: "postgres"
    database: ""
    user: ""
    password: ""
  fullnameOverride: keycloak
  keycloakConfigCli:
    cleanupAfterFinished:
      enabled: true
      seconds: 600
    enabled: true
    existingConfigmap: podiumd-config
    # image parameters for keycloak-config-cli
    image:
      registry: ""
      repository: keycloak-config-cli
      # -- image tag for keycloak-config-cli, this must be a version that is compatible with the keycloak image tag
      tag: "6.1.6"
  metrics:
    enabled: true
  pdb:
    create: false
  postgres:
    enabled: false
  replicaCount: 1
  resources:
    requests:
      cpu: 50m
      memory: 512Mi
  serviceMonitor:
    enabled: true
  production: true
  proxy: edge
  proxyHeaders: forwarded
  postgresql:
    enabled: false
  nameOverride: keycloak
  extraEnvVarsCM: keycloak-extra-env-vars

infinispan:
  deploy:
    nameOverride: ispn
    replicas: 2
    container:
      imagePullPolicy: IfNotPresent
      storage:
        storageClassName: podiumd-standard
    security:
      batch: |
        credentials add keystore -c password -p secret --path="internal-credentials.pfx"
        user create keycloak -p changemenow -g deployer
        user create admin -p changemetoo -g admin
    # how to generate your own secret for use:
    # openssl req -nodes -x509 -sha256 -newkey rsa:4096 -keyout ispn.key -out ispn.crt -days 3560 -subj "/C=NL/ST=Noord Holland/L=Amsterdam/O=INFO/OU=integratieteam/CN=ispn" -addext "subjectAltName = DNS:ispn,DNS:ispn.podiumd,DNS:ispn.podiumd.svc.cluster.local"
    # openssl pkcs12 -export -out ispn.pfx -inkey ispn.key -in ispn.crt -name server
    # use password as passphrase (as added under credentials add command above)
    # keytool -list -keystore ispn.keystore -storepass password
    # kubectl create secret generic ispn-secret --from-file=tls.crt=ispn.crt --from-file=tls.key=ispn.key --from-file=keystore.p12=ispn.pfx --from-literal=password=password --from-literal=alias=server -n podiumd
    # kubectl create secret generic ispn-transport-secret --from-file=tls.crt=ispn.crt --from-file=tls.key=ispn.key --from-file=cert.p12=ispn.pfx --from-literal=password=password --from-literal=alias=server -n podiumd
    # -- which secrets can be used for ssl, see above how to generate a proper secret for use with infinispan
    ssl:
      endpointSecretName: "ispn-secret"
      transportSecretName: "ispn-transport-secret"
    # see https://docs.jboss.org/infinispan/15.0/configdocs/infinispan-config-15.0.html for possible options
    # infinispan configuration yaml preferences for usage with keycloak
    infinispan:
      cacheContainer:
        serialization:
          allow-list:
            regex: "org.keycloak.*"
        transport:
          stack: "kubernetes"
          lock-timeout: "60000"
          urn:infinispan:server:15.0:securityRealm: "cluster-transport"
        caches:
          actionTokens:
            distributedCache:
              statistics: "true"
              owners: 2
              mode: "SYNC"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                maxIdle: "-1"
                lifespan: "-1"
                interval: "300000"
              memory:
                maxCount: "-1"
              persistence:
                fileStore:
                  path: cache
          sessions:
            distributedCache:
              statistics: "true"
              owners: 2
              mode: "SYNC"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                lifespan: "-1"
              persistence:
                fileStore:
                  path: cache
          authenticationSessions:
            distributedCache:
              statistics: "true"
              owners: 2
              mode: "SYNC"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                lifespan: "-1"
              persistence:
                fileStore:
                  path: cache
          offlineSessions:
            distributedCache:
              statistics: "true"
              owners: 2
              mode: "SYNC"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                lifespan: "-1"
              persistence:
                fileStore:
                  path: cache
          clientSessions:
            distributedCache:
              statistics: "true"
              owners: 2
              mode: "SYNC"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                lifespan: "-1"
              persistence:
                fileStore:
                  path: cache
          offlineClientSessions:
            distributedCache:
              statistics: "true"
              owners: 2
              mode: "SYNC"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                lifespan: "-1"
              persistence:
                fileStore:
                  path: cache
          loginFailures:
            distributedCache:
              statistics: "true"
              owners: 2
              mode: "SYNC"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                lifespan: "-1"
              persistence:
                fileStore:
                  path: cache
          work:
            replicatedCache:
              statistics: "true"
              encoding:
                mediaType: "application/x-jboss-marshalling"
              expiration:
                lifespan: "-1"
      server:
        security:
          credentialStores:
            - name: credentials
              path: internal-credentials.pfx
              clearTextCredential:
                clearText: "secret"
          securityRealms:
            - name: default
              # [USER] Comment or remove this properties realm to disable authentication.
              propertiesRealm:
                groupProperties:
                  path: groups.properties
                groupsAttribute: Roles
                userProperties:
                  path: users.properties
              serverIdentities:
                ssl:
                  keystore:
                    alias: "server"
                    path: "/etc/encrypt/endpoint/keystore.p12"
                    credentialReference:
                      store: credentials
                      alias: keystore
            - name: "cluster-transport"
              # Security realm for cluster transport. This setup is for encryption only, no authentication.
              # All the cluster server will use the same certificate both for key and trust store.
              propertiesRealm:
                groupProperties:
                  path: groups.properties
                groupsAttribute: Roles
                userProperties:
                  path: users.properties
              serverIdentities:
                ssl:
                  keystore:
                    alias: "server"
                    path: "/etc/encrypt/transport/cert.p12"
                    credentialReference:
                      store: credentials
                      alias: keystore
                  truststore:
                    path: "/etc/encrypt/transport/cert.p12"
                    credentialReference:
                      store: credentials
                      alias: keystore
            - name: metrics
              # [METRICS] Security realm for the metrics endpoint.
              propertiesRealm:
                groupProperties:
                  path: metrics-groups.properties
                  relativeTo: infinispan.server.config.path
                groupsAttribute: Roles
                userProperties:
                  path: metrics-users.properties
                  relativeTo: infinispan.server.config.path
  enabled: false
  monitoring:
    enabled: true

openldap:
  enabled: false
  persistence:
    size: 1Gi
    existingClaim: openldap
  persistentVolume:
    volumeAttributeShareName: openldap
  nameOverride: openldap
  fullnameOverride: openldap

brpmock:
  enabled: false
  nameOverride: brpmock

openzaak:
  configuration:
    oidcUrl: https://openzaak.example.nl
    oidcSecret: "<openzaak>"
    initContainer:
      enabled: true
    job:
      enabled: false
  settings:
    allowedHosts: openzaak-nginx.podiumd.svc.cluster.local
    email:
      port: 587
      useTLS: true
    disable2fa: true
  persistence:
    size: 10Gi
    existingClaim: openzaak
  persistentVolume:
    volumeAttributeShareName: openzaak
  image:
    tag: "1.15.0"
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
  worker:
    replicaCount: 1
    resources:
      requests:
        cpu: 10m
        memory: 480Mi
  nameOverride: openzaak
  fullnameOverride: openzaak
  flower:
    enabled: false
  beat:
    resources:
      requests:
        cpu: 10m
        memory: 160Mi    
  nginx:
    resources:
      requests:
        cpu: 10m
        memory: 16Mi
  redis:
    nameOverride: openzaak-redis
    fullnameOverride: openzaak-redis
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""
      resources:
        requests:
          cpu: 10m
          memory: 64Mi        

opennotificaties:
  configuration:
    enabled: true
    overwrite: true
    oidcUrl: https://opennotificaties.example.nl
    oidcSecret: "<opennotificaties>"
  settings:
    allowedHosts: opennotificaties.podiumd.svc.cluster.local
    maxRetries: 5
    retryBackoff: 3
    retryBackoffMax: 48
    email:
      port: 587
      useTLS: true
    disable2fa: true
  persistence:
    size: 10Gi
    existingClaim: opennotificaties
  persistentVolume:
    volumeAttributeShareName: opennotificaties
  image:
    tag: "1.7.1"
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
  worker:
    replicaCount: 1
    resources:
      requests:
        cpu: 50m
        memory: 386Mi
  nameOverride: opennotificaties
  fullnameOverride: opennotificaties
  flower:
    enabled: false
  rabbitmq:
    resources:
      requests:
        cpu: 300m
        memory: 256Mi
    nameOverride: opennotificaties-rabbitmq
    fullnameOverride: opennotificaties-rabbitmq
    auth:
      username: guest
      password: guest
      erlangCookie: SUPER-SECRET
  redis:
    nameOverride: opennotificaties-redis
    fullnameOverride: opennotificaties-redis
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""
      resources:
        requests:
          cpu: 10m
          memory: 64Mi        

objecten:
  configuration:
    oidcUrl: https://objecten.example.nl
    oidcSecret: "<objecten>"
  settings:
    allowedHosts: objecten.podiumd.svc.cluster.local
    email:
      port: 587
      useTLS: true
    disable2fa: true
  persistence:
    size: 10Gi
    existingClaim: objecten
  persistentVolume:
    volumeAttributeShareName: objecten
  image:
    tag: "2.4.4"
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
  worker:
    replicaCount: 1
    resources:
      requests:
        cpu: 50m
        memory: 192Mi
  nameOverride: objecten
  fullnameOverride: objecten
  flower:
    enabled: false
  redis:
    nameOverride: objecten-redis
    fullnameOverride: objecten-redis
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""
      resources:
        requests:
          cpu: 10m
          memory: 64Mi        

objecttypen:
  configuration:
    oidcUrl: https://objecttypen.example.nl
    oidcSecret: "<objecttypen>"
  settings:
    allowedHosts: objecttypen.podiumd.svc.cluster.local
    email:
      port: 587
      useTLS: true
    disable2fa: true
  image:
    tag: "2.2.2"
  resources:
    requests:
      cpu: 10m
      memory: 160Mi
  nameOverride: objecttypen
  fullnameOverride: objecttypen
  redis:
    nameOverride: objecttypen-redis
    fullnameOverride: objecttypen-redis
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""    
      resources:
        requests:
          cpu: 10m
          memory: 64Mi

openklant:
  configuration:
    oidcUrl: https://openklant.example.nl
    oidcSecret: "<openklant>"
  settings:
    allowedHosts: openklant.podiumd.svc.cluster.local
    email:
      port: 587
      useTLS: true
    disable2fa: true
  image:
    tag: "2.3.0"
  resources:
    requests:
      cpu: 100m
      memory: 300Mi
  worker:
    replicaCount: 1
    resources:
      requests:
        cpu: 50m
        memory: 200Mi
  nameOverride: openklant
  fullnameOverride: openklant
  redis:
    nameOverride: openklant-redis
    fullnameOverride: openklant-redis
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""
      resources:
        requests:
          cpu: 10m
          memory: 64Mi        
        
openformulieren:
  configuration:
    oidcUrl: https://openformulieren.example.nl
    oidcSecret: "<openformulieren>"
  settings:
    allowedHosts: openformulieren-nginx.podiumd.svc.cluster.local
    email:
      port: 587
      useTLS: true
  persistence:
    size: 10Gi
    existingClaim: openformulieren
    mediaMountSubpath: openformulieren/media
    privateMediaMountSubpath: openformulieren/private_media
  persistentVolume:
    volumeAttributeShareName: openformulieren
  image:
    tag: "2.7.11"
  resources:
    requests:
      cpu: 100m
      memory: 650Mi
  worker:
    replicaCount: 1
    resources:
      requests:
        cpu: 50m
        memory: 512Mi
  nameOverride: openformulieren
  fullnameOverride: openformulieren
  flower:
    enabled: false
  beat:
    resources:
      requests:
        cpu: 10m
        memory: 160Mi
  nginx:
    resources:
      requests:
        cpu: 10m
        memory: 16Mi
    config:
      clientMaxBodySize: 100M
  redis:
    nameOverride: openformulieren-redis
    fullnameOverride: openformulieren-redis
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""
      resources:
        requests:
          cpu: 10m
          memory: 64Mi

openinwoner:
  configuration:
    oidcUrl: https://openinwoner.example.nl
    oidcSecret: "<openinwoner>"
  settings:
    allowedHosts: openinwoner-nginx.podiumd.svc.cluster.local
    brpVersion: ""
    digidMock: ""
    eherkenningMock: ""    
    email:
      port: 587
      useTLS: true
  persistence:
    size: 10Gi
    existingClaim: openinwoner
  persistentVolume:
    volumeAttributeShareName: openinwoner
  image:
    tag: "1.25.0"
  resources:
    requests:
      cpu: 200m
      memory: 1Gi
  worker:
    replicaCount: 1
    resources:
      requests:
        cpu: 200m
        memory: 640Mi
  nameOverride: openinwoner
  fullnameOverride: openinwoner
  nginx:
    config:
      basicAuth:
        # Enable this when digid mock is set to digidMock: "true"
        enabled: false
        # You need to generate the encrypted basic auth password yourself with htpasswd or openssl.
        # This is an example user
        users: |-
          dimpact:$apr1$E03dZmYK$npjTaXfI05tMJ63gB8dxm. 
      clientMaxBodySize: 100M
    resources:
      requests:
        cpu: 30m
        memory: 8Mi
  redis:
    nameOverride: openinwoner-redis
    fullnameOverride: openinwoner-redis
    master:
      persistence:
        enabled: true
        size: 8Gi
        storageClass: ""    
      resources:
        requests:
          cpu: 20m
          memory: 64Mi
  elasticsearch:
    nameOverride: openinwoner-elasticsearch
    fullnameOverride: openinwoner-elasticsearch
    master:
      resources:
        requests:
          cpu: 100m
          memory: 640Mi
    data:
      resources:
        requests:
          cpu: 100m
    coordinating:
      resources:
        requests:
          cpu: 100m
          memory: 512Mi

kisselastic:
  kibanaDomain: kiss-kb-http.podiumd.svc.cluster.local:5601
  eck-operator:
    managedNamespaces:
      - podiumd

kiss:
  enabled: true
  configuration:
    oidcUrl: https://kiss.example.nl
    oidcSecret: "<kiss>"

  brp:
    baseUrl: ""
    apiKey: ""

  elastic:
    baseUrl: ""
    username: elastic
    password: ""

  enterpriseSearch:
    baseUrl: ""
    privateApikey: ""
    publicApikey: ""
    engine: kiss-engine

  esuite:
    baseUrl: ""
    clientId: kiss
    secret: ""
    contactverzoektypen: []

  database:
    host: ""
    name: ""
    user: ""
    password: ""

  email:
    host: ""
    port: null
    username: ""
    password: ""
    enableSSL: null
    feedbackFrom: ""
    feedbackTo: ""

  kvk:
    baseUrl: ""
    apikey: ""

  objecten:
    baseUrl: ""
    token: ""

  objecttypen:
    baseUrlIntern: ""
    baseUrlExtern: ""
    token: ""
    afdelingUUID: ""
    groepUUID: ""
    interneTaakUUID: ""
    kennisartikelUUID: ""
    medewerkerUUID: ""
    vacUUID: ""

  oidc:
    authority: ""
    clientId: kiss
    secret: ""
    medewerkerIdentificatieClaim: preferred_username
    medewerkerIdentificatieTruncate: null

  organisatieIds: ""

  imagePullSecrets: []



  nodeSelector: {}

  frontend:
    service:
      name: ""
    image:
      repository: ghcr.io/klantinteractie-servicesysteem/kiss-frontend
      tag: "v0.5.1-20250107153635-2d5264c"
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 10m
        memory: 100Mi
    aspNetCoreEnvironment: Production

  adapter:
    baseUrl: ""
    clientId: kiss_intern
    secret: ""
    image:
      repository: ghcr.io/icatt-menselijk-digitaal/podiumd-adapter
      tag: "latest"
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 10m
        memory: 100Mi

  sync:
    initialSync: true
    schedule:
      kennisbank: "*/59 * * * *"
      smoelenboek: "*/59 * * * *"
      vac: "*/59 * * * *"
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 1
    image:
      repository: "ghcr.io/klantinteractie-servicesysteem/kiss-elastic-sync"
      tag: "latest"
      pullPolicy: IfNotPresent

  alpine:
     image:
       repository: "alpine"
       tag: "3.20"
       pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

zac:
  auth:
    server: http://keycloak.example.nl
    realm: podiumd
    clientId: zac
    secret: changeme
  bagApi:
    url: http://bag.example.nl
    apiKey: "dummy"
  brpApi:
    url: http://brp.example.nl
    apiKey: "dummy"
  catalogusDomein: ALG
  contextUrl: http://zac.example.nl
  db:
    host: postgres
    name: zac
    user: zac
    password: changeme
  enabled: true
  nameOverride: zac
  fullnameOverride: zac
  gemeente:
    code: "007"
    naam: "Example Gemeente"
    mail: "noreply@example.nl"
  image:
    repository: ghcr.io/infonl/zaakafhandelcomponent
    pullPolicy: IfNotPresent
    tag: "1.12.660"
  keycloak:
    adminClient:
      id: zac-admin-client
      secret: changeme
  klantinteractiesApi:
    url: http://open-klant.example.nl
    token: openklanttoken
  kvkApi:
    url: http://kvk.example.nl
    apiKey: "dummy"
  mail:
    smtp:
      server: "mail.example.nl"
      port: "587"
      username: "dummy"
      password: "dummy"
  maxFileSizeMB: 150
  nginx:
    enabled: true
    client_max_body_size: 150M
  notificationsSecretKey: "changeme"
  objectenApi:
    url: http://objecten.example.nl
    token: objectentoken
  objecttypenApi:
    url: http://objecttypen.example.nl
    token: objecttypentoken
  openForms:
    url: http://open-forms.example.nl
  organizations:
    bron:
      rsin: 000000000
    verantwoordelijke:
      rsin: 000000000
  smartDocuments:
    enabled: false
    url: ""
    authentication: ""
    fixedUserName: ""
  # solr operator settings
  solr-operator:
    # -- turn functionality on/off
    enabled: true
    image:
      #repository:
      #tag:
    nodeSelector: {}
    solr:
      #busyBoxImage:
        #repository:
        #tag
      # -- set enabled to provision solrcloud as well
      enabled: true
      #image:
        #repository:
        #tag:
      # -- define memory settings for solr in the solrcloud
      javaMem: -Xms512m -Xmx768m
      jobs:
        createZacCore: true
        #image:
          #repository:
          #tag:
    # -- namespaces to watch for solr-operator
    watchNamespaces: "podiumd"
    zookeeper-operator:
      #hooks:
        #image:
          #repository:
          #tag:
      #image:
        #repository:
        #tag:
      # -- namespaces to watch for zookeeper-operator
      watchNamespace: "podiumd"
      #zookeeper:
        #repository:
        #tag:
  zgwApis:
    url: http://open-zaak.internal
    urlExtern: http://open-zaak.example.nl
    clientId: zac
    secret: changeme



clamav:
  image:
    tag: "1.4.1"
  nameOverride: clamav
  fullnameOverride: clamav
  clamdConfig: |
    ###############
    # General
    ###############

    DatabaseDirectory /var/lib/clamav
    TemporaryDirectory /tmp
    LogTime yes
    # CUSTOM: Use pid file in tmp
    PidFile /tmp/clamd.pid
    LocalSocket /tmp/clamd.sock
    TCPSocket 3310
    Foreground yes

    ###############
    # Results
    ###############

    DetectPUA yes
    ExcludePUA NetTool
    ExcludePUA PWTool
    HeuristicAlerts yes
    Bytecode yes

    ###############
    # Scan
    ###############

    ScanPE yes
    DisableCertCheck yes
    ScanELF yes
    AlertBrokenExecutables yes
    ScanOLE2 yes
    ScanPDF yes
    ScanSWF yes
    ScanMail yes
    PhishingSignatures yes
    PhishingScanURLs yes
    ScanHTML yes
    ScanArchive yes

    ###############
    # Scan
    ###############

    MaxScanSize 150M
    MaxFileSize 30M
    MaxRecursion 10
    MaxFiles 15000
    MaxEmbeddedPE 10M
    MaxHTMLNormalize 10M
    MaxHTMLNoTags 2M
    MaxScriptNormalize 5M
    MaxZipTypeRcg 1M
    MaxPartitions 128
    MaxIconsPE 200
    PCREMatchLimit 10000
    PCRERecMatchLimit 10000
  freshclamConfig: |
    ###############
    # General
    ###############

    DatabaseDirectory /var/lib/clamav/
    UpdateLogFile /dev/stdout
    LogTime yes
    # CUSTOM: Use pid file in tmp
    PidFile /tmp/freshclam.pid
    # CUSTOM: Set defined user
    DatabaseOwner 2000

    ###############
    # Updates
    ###############

    DatabaseMirror database.clamav.net
    ScriptedUpdates yes
    NotifyClamd /etc/clamav/clamd.conf
    Bytecode yes
  resources:
    requests:
      cpu: 1000m
      memory: 4Gi

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

httpRequestJob:
  intellijHttpClient:
    image:
      repository: jetbrains/intellij-http-client
      tag: "243.22562.13"
  jwtCli:
    image:
      repository: bitnami/jwt-cli
      tag: "6.2.0"
  alpine:
    image:
      repository: alpine
      tag: "3.20"
  nodeSelector: {}
