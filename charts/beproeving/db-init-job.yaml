apiVersion: batch/v1
kind: Job
metadata:
  name: ita-db-init
  namespace: beproeving
  labels:
    app: ita-db-init
    component: db-init
spec:
  template:
    metadata:
      labels:
        app: ita-db-init
        component: db-init
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: db-init-script
          image: "busybox:1.35"
          command:
            - /bin/sh
            - -c
            - |
              cat > /tmp/init-db.sh << 'EOF'
              #!/bin/bash
              
              # Database initialization script for ITA
              # This script checks if the "ita" database and user exist in PostgreSQL 
              # and creates them if they don't exist
              
              set -e
              
              # Configuration
              DB_HOST="${DB_HOST:-ita-postgresql}"
              DB_PORT="${DB_PORT:-5432}"
              DB_NAME="${DB_NAME:-ita}"
              DB_USER="${DB_USER:-ita}"
              DB_PASSWORD="${DB_PASSWORD:-@Th1sIsASecret@}"
              POSTGRES_USER="${POSTGRES_USER:-postgres}"
              POSTGRES_PASSWORD="${POSTGRES_PASSWORD:-@Th1sIsASecret@}"
              
              echo "üîç Checking if database '${DB_NAME}' and user '${DB_USER}' exist..."
              
              # Function to check if database exists
              check_database_exists() {
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "postgres" -t \
                      -c "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}';" \
                      2>/dev/null | grep -q 1
              }
              
              # Function to create database
              create_database() {
                  echo "üóÑÔ∏è  Creating database '${DB_NAME}'..."
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "postgres" \
                      -c "CREATE DATABASE ${DB_NAME};"
                  echo "‚úÖ Database '${DB_NAME}' created successfully!"
              }
              
              # Function to check if user exists
              check_user_exists() {
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "postgres" -t \
                      -c "SELECT 1 FROM pg_roles WHERE rolname='${DB_USER}';" \
                      2>/dev/null | grep -q 1
              }
              
              # Function to create user
              create_user() {
                  echo "üë§ Creating user '${DB_USER}'..."
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "postgres" \
                      -c "CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';"
                  echo "‚úÖ User '${DB_USER}' created successfully!"
              }
              
              # Function to grant privileges
              grant_privileges() {
                  echo "üîê Granting privileges to user '${DB_USER}'..."
                  
                  # Execute SQL commands individually to avoid heredoc issues
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "GRANT USAGE ON SCHEMA public TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "GRANT CREATE ON SCHEMA public TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${DB_USER};"
                  PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                      -U "${POSTGRES_USER}" -d "${DB_NAME}" \
                      -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO ${DB_USER};"
                  
                  echo "‚úÖ Privileges granted successfully!"
              }
              
              # Wait for PostgreSQL to be ready
              echo "‚è≥ Waiting for PostgreSQL to be ready..."
              until PGPASSWORD="${POSTGRES_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" \
                  -U "${POSTGRES_USER}" -d "postgres" -c '\q' 2>/dev/null; do
                  echo "üì° PostgreSQL is not ready yet, waiting..."
                  sleep 2
              done
              echo "‚úÖ PostgreSQL is ready!"
              
              # Check if database exists
              if check_database_exists; then
                  echo "‚úÖ Database '${DB_NAME}' already exists!"
              else
                  echo "‚ùå Database '${DB_NAME}' does not exist, creating..."
                  create_database
              fi
              
              # Check if user exists
              if check_user_exists; then
                  echo "‚úÖ User '${DB_USER}' already exists!"
                  echo "üîê Granting privileges to existing user..."
                  grant_privileges
              else
                  echo "‚ùå User '${DB_USER}' does not exist, creating..."
                  create_user
                  grant_privileges
              fi
              
              echo "üéâ Database initialization completed successfully!"
              EOF
              chmod +x /tmp/init-db.sh
          volumeMounts:
            - name: init-script
              mountPath: /tmp
      containers:
        - name: db-init
          image: "postgres:15"
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -c
            - |
              # Install PostgreSQL client
              apt-get update && apt-get install -y postgresql-client
              
              # Execute the database initialization script
              /tmp/init-db.sh
          volumeMounts:
            - name: init-script
              mountPath: /tmp
          env:
            - name: DB_HOST
              value: "ita-postgresql"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "ita"
            - name: DB_USER
              value: "ita"
            - name: DB_PASSWORD
              value: "@Th1sIsASecret@"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "@Th1sIsASecret@"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
      volumes:
        - name: init-script
          emptyDir: {}
